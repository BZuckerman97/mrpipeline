% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_coloc_pipeline.R
\name{run_coloc_pipeline}
\alias{run_coloc_pipeline}
\title{Run a Colocalization Pipeline with Optional SuSiE and colocPropTest}
\usage{
run_coloc_pipeline(
  exposure_data,
  outcome_gwas_path,
  exposure_name = "Exposure",
  outcome_name = "Outcome",
  exposure_type = "quant",
  outcome_type = "cc",
  exposure_n = NULL,
  outcome_n,
  outcome_s = NULL,
  exposure_sdY = 1,
  out_snp_col = "SNP",
  out_beta_col = "BETA",
  out_se_col = "SE",
  out_eaf_col = "EAF",
  out_effect_allele_col = "A1",
  out_other_allele_col = "A2",
  out_pval_col = "PVAL",
  out_chr_col = "CHR",
  out_pos_col = "BP",
  out_n_col = NULL,
  perform_coloc_abf = TRUE,
  perform_susie = TRUE,
  perform_coloc_prop_test = TRUE,
  gene_chr,
  gene_start,
  gene_end,
  window_kb = 200,
  ld_bfile_path,
  plink_bin_path = NULL,
  coloc_p1 = 1e-04,
  coloc_p2 = 1e-04,
  coloc_p12 = 1e-05,
  output_dir = "coloc_susie_results",
  verbose = TRUE
)
}
\arguments{
\item{exposure_data}{A data frame containing pre-formatted exposure GWAS summary statistics.
Expected to have columns like SNP, beta.exposure, se.exposure,
eaf.exposure, effect_allele.exposure, other_allele.exposure,
pval.exposure, chr.exposure, pos.exposure, samplesize.exposure (optional).
This can be the output of functions like \code{format_pqtl_decode} or \code{format_pqtl_ukbppp}.}

\item{outcome_gwas_path}{Path to the outcome GWAS summary statistics file.}

\item{exposure_name}{Character string, name for the exposure trait.}

\item{outcome_name}{Character string, name for the outcome trait.}

\item{exposure_type}{Character, type of exposure trait ("quant" or "cc").}

\item{outcome_type}{Character, type of outcome trait ("quant" or "cc").}

\item{exposure_n}{Integer, sample size for the exposure GWAS. If not provided and
\code{exposure_data} contains a \code{samplesize.exposure} column, that will be used.}

\item{outcome_n}{Integer, sample size for the outcome GWAS.}

\item{outcome_s}{Numeric, proportion of cases if outcome_type is "cc". Default NULL.}

\item{exposure_sdY}{Numeric, standard deviation of the exposure trait if exposure_type is "quant".
Assumed to be 1 if betas are standardized. Default 1.}

\item{out_snp_col}{Character, SNP ID column name in outcome data file.}

\item{out_beta_col}{Character, beta column name in outcome data file.}

\item{out_se_col}{Character, standard error column name in outcome data file.}

\item{out_eaf_col}{Character, effect allele frequency column name in outcome data file.}

\item{out_effect_allele_col}{Character, effect allele column name in outcome data file.}

\item{out_other_allele_col}{Character, other allele column name in outcome data file.}

\item{out_pval_col}{Character, p-value column name in outcome data file.}

\item{out_chr_col}{Character, chromosome column name in outcome data file.}

\item{out_pos_col}{Character, position column name in outcome data file.}

\item{out_n_col}{Character, per-SNP sample size column in outcome data file (optional).}

\item{perform_coloc_abf}{Logical, whether to run \code{coloc.abf}.}

\item{perform_susie}{Logical, whether to run SuSiE, \code{coloc.susie}, and \code{coloc.signals}.}

\item{perform_coloc_prop_test}{Logical, whether to run \code{colocPropTest}.
Requires \code{perform_susie} to be TRUE.}

\item{gene_chr}{Character or Integer, chromosome of the gene/region of interest.}

\item{gene_start}{Integer, start position of the gene/region.}

\item{gene_end}{Integer, end position of the gene/region.}

\item{window_kb}{Integer, window in kilobases to extend around the gene/region.}

\item{ld_bfile_path}{Path to PLINK bfile (prefix, without .bed/.bim/.fam) for LD reference.}

\item{plink_bin_path}{Path to PLINK executable. Auto-detected if not provided.}

\item{coloc_p1}{Numeric, prior probability P(H1).}

\item{coloc_p2}{Numeric, prior probability P(H2).}

\item{coloc_p12}{Numeric, prior probability P(H4).}

\item{output_dir}{Path to a directory where results and logs might be saved.}

\item{verbose}{Logical, whether to print progress messages.}
}
\value{
A list containing results from the requested analyses.
Elements may include: \code{harmonized_data_aligned}, \code{ld_matrix},
\code{coloc_abf_results}, \code{susie_exposure}, \code{susie_outcome},
\code{coloc_susie_results}, \code{coloc_signals_results}, \code{coloc_prop_test_results}.
}
\description{
This function performs colocalization analysis using coloc.abf,
optionally integrates SuSiE results for colocalization (using coloc.susie and coloc.signals),
and can run colocPropTest on the results of coloc.signals.
}
\examples{
\dontrun{
# Create dummy exposure data (already formatted)
dummy_exposure_data <- data.frame(
  SNP = paste0("rs", 1:100),
  chr.exposure = 1,
  pos.exposure = (1:100) * 1000 + 10000, # Ensure positions are within region
  effect_allele.exposure = "A",
  other_allele.exposure = "G",
  beta.exposure = rnorm(100, 0, 0.1),
  se.exposure = runif(100, 0.01, 0.05),
  pval.exposure = runif(100),
  eaf.exposure = runif(100, 0.01, 0.99),
  samplesize.exposure = 10000,
  phenotype.exposure = "MyExposure"
)

# Create dummy outcome GWAS file
temp_dir <- tempdir()
outcome_file <- file.path(temp_dir, "outcome_gwas.txt")
ld_bfile <- file.path(temp_dir, "ld_ref") # Needs actual .bed, .bim, .fam

write.table(data.frame(
  SNPID = paste0("rs", 1:150), CHR = 1, POS = (1:150) * 1000 + 10000,
  EA = "A", NEA = "G", BETA_outcome = rnorm(150, 0, 0.1),
  SE_outcome = runif(150, 0.01, 0.05), P_outcome = runif(150),
  EAF_outcome = runif(150, 0.01, 0.99), N_outcome = 20000
), outcome_file, sep = "\t", row.names = FALSE, quote = FALSE)

# Create dummy LD reference files (these won't work for actual LD calculation)
# file.create(paste0(ld_bfile, c(".bed", ".bim", ".fam")))

results <- run_coloc_pipeline(
  exposure_data = dummy_exposure_data,
  outcome_gwas_path = outcome_file,
  exposure_name = "MyExposure",
  outcome_name = "MyOutcome",
  exposure_type = "quant",
  outcome_type = "cc",
  exposure_n = 10000, # Can be omitted if samplesize.exposure in exposure_data
  outcome_n = 20000,
  outcome_s = 0.1,
  out_snp_col = "SNPID", out_beta_col = "BETA_outcome", out_se_col = "SE_outcome",
  out_eaf_col = "EAF_outcome", out_effect_allele_col = "EA", out_other_allele_col = "NEA",
  out_pval_col = "P_outcome", out_chr_col = "CHR", out_pos_col = "POS", out_n_col = "N_outcome",
  perform_coloc_abf = TRUE,
  perform_susie = FALSE, # Set to TRUE if you have a working LD ref and susieR
  perform_coloc_prop_test = FALSE, # Set to TRUE if perform_susie is TRUE
  gene_chr = 1,
  gene_start = 20000,
  gene_end = 80000,
  window_kb = 50,
  ld_bfile_path = ld_bfile,
  output_dir = file.path(temp_dir, "coloc_results")
)
print(results$coloc_abf_results$summary)
}
}
